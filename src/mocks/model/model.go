// Code generated by MockGen. DO NOT EDIT.
// Source: model/model.go

// Package mock_model is a generated GoMock package.
package mock_model

import (
	entity "assignment/entity"
	mysql "assignment/model/mysql"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockModelRepository is a mock of ModelRepository interface.
type MockModelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockModelRepositoryMockRecorder
}

// MockModelRepositoryMockRecorder is the mock recorder for MockModelRepository.
type MockModelRepositoryMockRecorder struct {
	mock *MockModelRepository
}

// NewMockModelRepository creates a new mock instance.
func NewMockModelRepository(ctrl *gomock.Controller) *MockModelRepository {
	mock := &MockModelRepository{ctrl: ctrl}
	mock.recorder = &MockModelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelRepository) EXPECT() *MockModelRepositoryMockRecorder {
	return m.recorder
}

// ConfigureRequestId mocks base method.
func (m *MockModelRepository) ConfigureRequestId(requestId *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConfigureRequestId", requestId)
}

// ConfigureRequestId indicates an expected call of ConfigureRequestId.
func (mr *MockModelRepositoryMockRecorder) ConfigureRequestId(requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureRequestId", reflect.TypeOf((*MockModelRepository)(nil).ConfigureRequestId), requestId)
}

// ConfigureUserId mocks base method.
func (m *MockModelRepository) ConfigureUserId(userId *string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ConfigureUserId", userId)
}

// ConfigureUserId indicates an expected call of ConfigureUserId.
func (mr *MockModelRepositoryMockRecorder) ConfigureUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureUserId", reflect.TypeOf((*MockModelRepository)(nil).ConfigureUserId), userId)
}

// GetUser mocks base method.
func (m *MockModelRepository) GetUser(ctx context.Context, userId string) (mysql.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, userId)
	ret0, _ := ret[0].(mysql.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockModelRepositoryMockRecorder) GetUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockModelRepository)(nil).GetUser), ctx, userId)
}

// GetUserAccounts mocks base method.
func (m *MockModelRepository) GetUserAccounts(ctx context.Context, userId string) ([]mysql.AccountWithDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAccounts", ctx, userId)
	ret0, _ := ret[0].([]mysql.AccountWithDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAccounts indicates an expected call of GetUserAccounts.
func (mr *MockModelRepositoryMockRecorder) GetUserAccounts(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAccounts", reflect.TypeOf((*MockModelRepository)(nil).GetUserAccounts), ctx, userId)
}

// GetUserBanners mocks base method.
func (m *MockModelRepository) GetUserBanners(ctx context.Context, userId string) ([]entity.Banners, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBanners", ctx, userId)
	ret0, _ := ret[0].([]entity.Banners)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBanners indicates an expected call of GetUserBanners.
func (mr *MockModelRepositoryMockRecorder) GetUserBanners(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBanners", reflect.TypeOf((*MockModelRepository)(nil).GetUserBanners), ctx, userId)
}

// GetUserCards mocks base method.
func (m *MockModelRepository) GetUserCards(ctx context.Context, userId string) ([]mysql.CardsWithDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserCards", ctx, userId)
	ret0, _ := ret[0].([]mysql.CardsWithDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserCards indicates an expected call of GetUserCards.
func (mr *MockModelRepositoryMockRecorder) GetUserCards(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserCards", reflect.TypeOf((*MockModelRepository)(nil).GetUserCards), ctx, userId)
}

// GetUserHashedPin mocks base method.
func (m *MockModelRepository) GetUserHashedPin(ctx context.Context, userId string) (entity.UserPin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHashedPin", ctx, userId)
	ret0, _ := ret[0].(entity.UserPin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHashedPin indicates an expected call of GetUserHashedPin.
func (mr *MockModelRepositoryMockRecorder) GetUserHashedPin(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHashedPin", reflect.TypeOf((*MockModelRepository)(nil).GetUserHashedPin), ctx, userId)
}

// GetUserSavedAccounts mocks base method.
func (m *MockModelRepository) GetUserSavedAccounts(ctx context.Context, userId string) ([]mysql.SavedAccounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSavedAccounts", ctx, userId)
	ret0, _ := ret[0].([]mysql.SavedAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSavedAccounts indicates an expected call of GetUserSavedAccounts.
func (mr *MockModelRepositoryMockRecorder) GetUserSavedAccounts(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSavedAccounts", reflect.TypeOf((*MockModelRepository)(nil).GetUserSavedAccounts), ctx, userId)
}

// RevokeExistingTokenAndCreateNewToken mocks base method.
func (m *MockModelRepository) RevokeExistingTokenAndCreateNewToken(ctx context.Context, userId string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeExistingTokenAndCreateNewToken", ctx, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RevokeExistingTokenAndCreateNewToken indicates an expected call of RevokeExistingTokenAndCreateNewToken.
func (mr *MockModelRepositoryMockRecorder) RevokeExistingTokenAndCreateNewToken(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeExistingTokenAndCreateNewToken", reflect.TypeOf((*MockModelRepository)(nil).RevokeExistingTokenAndCreateNewToken), ctx, userId)
}
